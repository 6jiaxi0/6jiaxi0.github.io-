<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>接口</title>
    <link href="/6jiaxi0.github.io-/2024/02/27/%E6%8E%A5%E5%8F%A3/"/>
    <url>/6jiaxi0.github.io-/2024/02/27/%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>在抽象类中，抽象方法本质上是定义接口规范：即规定高层类的接口，从而保证所有子类都有相同的接口实现，这样，多态就能发挥出威力。接口就是给出一些没有实现的方法，封装在一起，到某个类要使用时，在根据具体情况实现</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义接口</span><br>interface 接口名&#123;<br><span class="hljs-comment">//可以有属性</span><br><span class="hljs-comment">/*方法:</span><br><span class="hljs-comment">1.抽象方法</span><br><span class="hljs-comment">2.默认实现方法</span><br><span class="hljs-comment">3.静态方法</span><br><span class="hljs-comment">*/</span>  <br>&#125;<br><span class="hljs-comment">//实现接口</span><br>class 类名 implements 接口&#123;<br><span class="hljs-comment">//必须实现所有的抽象方法</span><br>&#125;<br><span class="hljs-comment">//小结:在Java7.0前接口里所有的方法都没有方法体，即都是抽象方法</span><br><span class="hljs-comment">//java8.0后接口可以有静态方法，默认方法，也就是说吧接口中也可以有方法的具体实现</span><br></code></pre></td></tr></table></figure><h3 id="接口的细节"><a href="#接口的细节" class="headerlink" title="接口的细节"></a>接口的细节</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.LJX.interface_;<br><br><span class="hljs-keyword">import</span> com.LJX.Static_.AA;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        IA ia = new IA();</span><br>        <span class="hljs-comment">//&#x27;IA&#x27; is abstract; cannot be instantiated</span><br><br>        System.out.println(ID.n1);<span class="hljs-comment">//可以接口名访问说明static</span><br>       <span class="hljs-comment">//Cannot assign a value to final variable &#x27;n1&#x27;</span><br><span class="hljs-comment">//        ID.n1 = 0;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//接口 的注意事项和细节</span><br><br><span class="hljs-comment">//1.接口不能被实例化</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;&#125;<br><br><span class="hljs-comment">//2.接口中所有的方法都是public 。</span><br><span class="hljs-comment">//接口中的抽象方法不用abstract 修饰</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IB</span>&#123;<br><span class="hljs-comment">//    void AAA();</span><br>    <span class="hljs-comment">//实际是 abstract void AAA();</span><br><span class="hljs-comment">//    abstract void say()&#123;</span><br><span class="hljs-comment">//Interface abstract methods cannot have body</span><br><span class="hljs-comment">//    &#125;;</span><br><span class="hljs-comment">//JDK 1.9 以后，允许将方法定义为 private，使得某些复用的代码不会把方法暴露出去</span><br><span class="hljs-comment">//    private void say()&#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;ikun&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    void sya();</span><br>&#125;<br><span class="hljs-comment">//alt + enter 快速生成重写方法</span><br><span class="hljs-comment">//class tem implements IB&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void sya() &#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//3.抽象类去实现接口时可以不实现接口的抽象方法</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IC</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ikun</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IC</span>&#123;&#125;<br><br><span class="hljs-comment">//4.一个类可以实现多个接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>,IB&#123;&#125;<br><br><span class="hljs-comment">//5.接口中的属性，只能是final的，而且是 public static final 修饰符</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ID</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//等价 public static final int n1</span><br>&#125;<br><br><span class="hljs-comment">//7.接口属性 的访问形式， 接口名.属性</span><br><span class="hljs-comment">//8.接口不是类，不能继承其他类，但是，可以继承多个别的接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IE</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IA</span>,IB,IC&#123;&#125;<br><span class="hljs-comment">//9.接口的修饰符只能是public和默认，与类相同</span><br><span class="hljs-comment">//private interface IF&#123;&#125;</span><br><span class="hljs-comment">//protected interface IF&#123;&#125;</span><br><span class="hljs-comment">// interface IF&#123;&#125;</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IF</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h3><p>Java接口的多态特性体现在可以使用接口类型的引用变量来引用实现了该接口的任意类的对象，从而实现对不同类的对象进行统一的操作和处理。</p><p>举个例子，假设有一个接口Animal：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后有两个类Dog和Cat分别实现了Animal接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog barks&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat meows&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着可以使用Animal类型的引用变量来引用Dog和Cat对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br>dog.makeSound(); <span class="hljs-comment">// 输出：Dog barks</span><br>cat.makeSound(); <span class="hljs-comment">// 输出：Cat meows</span><br></code></pre></td></tr></table></figure><p>这里Animal类型的引用变量可以引用不同类的对象，并且调用相同的方法makeSound，实现了对不同类的对象进行统一的操作。这就是Java接口的多态特性的体现。</p><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.LJX.interface_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceArr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态 数组 ==&gt;  接口类型数组</span><br>        USb p[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">USb</span>[<span class="hljs-number">2</span>];<br>        p[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone_</span>();<br>        p[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">camera_</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">USb</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USb</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">camera_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USb</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="多态传递"><a href="#多态传递" class="headerlink" title="多态传递"></a>多态传递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.LJX.interface_;<br><span class="hljs-comment">//演示多态传递</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Interfacepass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//接口类型 的变量可以访问实现了该接口的类的对象实例</span><br>        <span class="hljs-type">IH</span> <span class="hljs-variable">ih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">key</span>();<br>        <span class="hljs-comment">//如果IG 继承了IH接口,而key实现了IG接口</span><br>        <span class="hljs-comment">//那么，实际上就相当于key类也实现了IH接口</span><br>        <span class="hljs-type">IG</span> <span class="hljs-variable">ig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">key</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IH</span>&#123;&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IG</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IH</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">key</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IG</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test_my_site</title>
    <link href="/6jiaxi0.github.io-/2024/01/28/test-my-site/"/>
    <url>/6jiaxi0.github.io-/2024/01/28/test-my-site/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/6jiaxi0.github.io-/2024/01/28/hello-world/"/>
    <url>/6jiaxi0.github.io-/2024/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
